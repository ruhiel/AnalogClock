<Window x:Class="AnalogClock.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:AnalogClock"
        mc:Ignorable="d"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:vm="clr-namespace:AnalogClock.ViewModels"
        xmlns:conv="clr-namespace:AnalogClock.Converter"
        xmlns:rp="clr-namespace:Reactive.Bindings.Interactivity;assembly=ReactiveProperty.WPF"
        Title="MainWindow" AllowsTransparency="True" Width="{Binding NowWidth.Value, Mode=TwoWay}" Height="{Binding NowHeight.Value, Mode=TwoWay}" WindowStyle="None" Background="Transparent" Loaded="Window_Loaded" AllowDrop="True" ResizeMode="CanResizeWithGrip"
        ShowInTaskbar="False">
    <Window.DataContext>
        <vm:MainWindowViewModels/>
    </Window.DataContext>
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="PreviewDragOver">
            <rp:EventToReactiveCommand Command="{Binding PreviewDragOverCommand}"/>
        </i:EventTrigger>
        <i:EventTrigger EventName="Drop">
            <rp:EventToReactiveCommand Command="{Binding DropCommand}"/>
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <Window.ContextMenu>
        <ContextMenu>
            <MenuItem Header="設定">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <!-- set the command, called after the converter -->
                        <rp:EventToReactiveCommand Command="{Binding SettingCommand, Mode=OneWay}">
                            <conv:EventArgsConverter/>
                        </rp:EventToReactiveCommand>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </MenuItem>
            <MenuItem Header="最前面に固定" IsChecked="False" IsCheckable="True" Checked="fixedFront_Checked" Unchecked="fixedFront_Unchecked"/>
            <MenuItem Header="終了">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <!-- set the command, called after the converter -->
                        <rp:EventToReactiveCommand Command="{Binding ExitCommand, Mode=OneWay}">
                            <conv:EventArgsConverter/>
                        </rp:EventToReactiveCommand>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </MenuItem>
        </ContextMenu>
    </Window.ContextMenu>
    <Window.Resources>
        <Storyboard x:Key="SecondHand" x:Name="SecondHand" RepeatBehavior="Forever" >
            <DoubleAnimation
                Duration="0:1:0" From="0" To="360"
                Storyboard.TargetName="SecondLine"
                Storyboard.TargetProperty="(Image.RenderTransform).(RotateTransform.Angle)"
            />
        </Storyboard>
        <Storyboard x:Key="MinuteHand" x:Name="MinuteHand" RepeatBehavior="Forever">
            <DoubleAnimation
                Duration="1:0:0" From="0" To="360"
                Storyboard.TargetName="MinuteLine"
                Storyboard.TargetProperty="(Image.RenderTransform).(RotateTransform.Angle)"
            />
        </Storyboard>
        <Storyboard x:Key="HourHand" x:Name="HourHand" RepeatBehavior="Forever">
            <DoubleAnimation
                Duration="12:0:0" From="0" To="360"
                Storyboard.TargetName="HourLine"
                Storyboard.TargetProperty="(Image.RenderTransform).(RotateTransform.Angle)"
            />
        </Storyboard>
    </Window.Resources>
    <Grid>
        <Image Width="{Binding NowWidth.Value}" Height="{Binding NowHeight.Value}" Source="{Binding Source.Value}" AllowDrop="True"/>
        <Path Stroke="{Binding SecondLineColor.Value}" RenderTransformOrigin="0.5,0.5" x:Name="SecondLine" StrokeThickness="4" HorizontalAlignment="Center" VerticalAlignment="Center" Width="282" Height="282">
            <Path.Data>
                <LineGeometry StartPoint="140,143" EndPoint="253,30"/>
            </Path.Data>
            <Path.RenderTransform>
                <RotateTransform x:Name="AngleSecond" Angle="0"/>
            </Path.RenderTransform>
        </Path>
        <Path Stroke="{Binding MinuteLineColor.Value}" RenderTransformOrigin="0.5,0.5" x:Name="MinuteLine" StrokeThickness="4" HorizontalAlignment="Center" VerticalAlignment="Center" Width="282" Height="282">
            <Path.Data>
                <LineGeometry StartPoint="140,143" EndPoint="253,30"/>
            </Path.Data>
            <Path.RenderTransform>
                <RotateTransform x:Name="AngleMinute" Angle="0"/>
            </Path.RenderTransform>
        </Path>
        <Path Stroke="{Binding HourLineColor.Value}" RenderTransformOrigin="0.5,0.5" x:Name="HourLine" StrokeThickness="4" HorizontalAlignment="Center" VerticalAlignment="Center" Width="282" Height="282">
            <Path.Data>
                <LineGeometry StartPoint="140,143" EndPoint="230,53"/>
            </Path.Data>
            <Path.RenderTransform>
                <RotateTransform x:Name="AngleHour" Angle="0"/>
            </Path.RenderTransform>
        </Path>
        <StackPanel Orientation="Horizontal" VerticalAlignment="Bottom" HorizontalAlignment="Center">
            <TextBlock x:Name="textBlock" Text="00:00" FontSize="50" Foreground="{Binding ClockTextForeground.Value}"/>
        </StackPanel>
    </Grid>
</Window>
